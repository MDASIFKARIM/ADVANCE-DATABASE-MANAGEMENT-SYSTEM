CREATE TABLE DEPT
       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
	DNAME VARCHAR2(14) ,
	LOC VARCHAR2(13) ) ;


CREATE TABLE EMP
       (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);



INSERT INTO DEPT VALUES
	(10,'ACCOUNTING','NEW YORK');

INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES
	(30,'SALES','CHICAGO');

INSERT INTO DEPT VALUES
	(40,'OPERATIONS','BOSTON');

INSERT INTO EMP VALUES
(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);

INSERT INTO EMP VALUES
(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);

INSERT INTO EMP VALUES
(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);

INSERT INTO EMP VALUES
(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);

INSERT INTO EMP VALUES
(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);

INSERT INTO EMP VALUES
(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);

INSERT INTO EMP VALUES
(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);

INSERT INTO EMP VALUES
(7788,'SCOTT','ANALYST',7566,to_date('13-JUL-87')-85,3000,NULL,20);

INSERT INTO EMP VALUES
(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);

INSERT INTO EMP VALUES
(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);

INSERT INTO EMP VALUES
(7876,'ADAMS','CLERK',7788,to_date('13-JUL-87')-51,1100,NULL,20);

INSERT INTO EMP VALUES
(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);

INSERT INTO EMP VALUES
(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);

INSERT INTO EMP VALUES
(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);





CREATE TABLE BONUS
	(
	ENAME VARCHAR2(10)	,
	JOB VARCHAR2(9)  ,
	SAL NUMBER,
	COMM NUMBER
	) ;



CREATE TABLE SALGRADE
      ( GRADE NUMBER,
	LOSAL NUMBER,
	HISAL NUMBER );



INSERT INTO SALGRADE VALUES (1,700,1200);

INSERT INTO SALGRADE VALUES (2,1201,1400);

INSERT INTO SALGRADE VALUES (3,1401,2000);

INSERT INTO SALGRADE VALUES (4,2001,3000);

INSERT INTO SALGRADE VALUES (5,3001,9999);

COMMIT;









PL/SQL
Part 01:
1.Write a query that can multiply two numbers taking input from user.
DECLARE 
a number:=:a;
b number:=:b;
c number;
BEGIN
c:=a*b;
dbms_output.put_line(c);
END





2.Write a query that can add two numbers if the numbers are equal. Use CASE Statement.
add two numbers if the numbers are equal
DECLARE
num1 INTEGER := 10;  
 num2 INTEGER := 10; 
    result INTEGER;
BEGIN
   
    CASE
        WHEN num1 = num2 THEN
            result := num1 + num2;
        ELSE
            result := NULL; 
    END CASE;

   
    IF result IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Sum of numbers: ' || result);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Numbers are not equal. No addition performed.');
    END IF;
END;






add two numbers if the numbers are not equal
DECLARE
    num1 INTEGER := 10; 
    num2 INTEGER := 20; 
    result INTEGER;
BEGIN
   
    CASE
        WHEN num1 = num2 THEN
            result := num1 + num2;
        ELSE
            result := NULL; 
    END CASE;

   
    IF result IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Sum of numbers: ' || result);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Numbers are not equal. No addition performed.');
    END IF;
END;






3.Write a query that can check if two strings are equal or not. Use IF-THEN-ELSIF Statement.

 two strings are not  equal 
DECLARE
    str1 VARCHAR2(100) := 'Hello';  
    str2 VARCHAR2(100) := 'hello';  
BEGIN
   
    IF str1 = str2 THEN
        DBMS_OUTPUT.PUT_LINE('Strings are equal.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Strings are not equal.');
    END IF;
END;






two strings are equal 

DECLARE
    str1 VARCHAR2(100) := 'Hello';  
    str2 VARCHAR2(100) := 'Hello';  
BEGIN
   
    IF str1 = str2 THEN
        DBMS_OUTPUT.PUT_LINE('Strings are equal.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Strings are not equal.');
    END IF;
END;






4.Write a query that can multiply two numbers. If the result obtained is less than 100, Hi is displayed, if the result obtained is more than 100, Bye is displayed and if the result obtained is equal to 100, ADBMS is displayed. Use IF-THEN-ELSIF Statement

 If the result obtained is less than 100, Hi is displayed

DECLARE
    num1 INTEGER := 10; 
    num2 INTEGER := 5; 
    result INTEGER;
BEGIN
    result := num1 * num2;  

    
    IF result < 100 THEN
        DBMS_OUTPUT.PUT_LINE('Hi');
    ELSIF result > 100 THEN
        DBMS_OUTPUT.PUT_LINE('Bye');
    ELSIF result = 100 THEN
        DBMS_OUTPUT.PUT_LINE('ADBMS');
    END IF;
END;







if the result obtained is more than 100, Bye is displayed
DECLARE
    num1 INTEGER := 10; 
    num2 INTEGER := 20; 
    result INTEGER;
BEGIN
    result := num1 * num2;  

    
    IF result < 100 THEN
        DBMS_OUTPUT.PUT_LINE('Hi');
    ELSIF result > 100 THEN
        DBMS_OUTPUT.PUT_LINE('Bye');
    ELSIF result = 100 THEN
        DBMS_OUTPUT.PUT_LINE('ADBMS');
    END IF;
END;









 if the result obtained is more than 100, Bye is displayed and if the result obtained is equal to 100, ADBMS is displayed.
DECLARE
    num1 INTEGER := 10; 
    num2 INTEGER := 10; 
    result INTEGER;
BEGIN
    result := num1 * num2;  

    
    IF result < 100 THEN
        DBMS_OUTPUT.PUT_LINE('Hi');
    ELSIF result > 100 THEN
        DBMS_OUTPUT.PUT_LINE('Bye');
    ELSIF result = 100 THEN
        DBMS_OUTPUT.PUT_LINE('ADBMS');
    END IF;
END;








5.Write a query that can check if two numbers are equal or not.  Use CASE Statement.


if two numbers are equal

DECLARE
    num1 INTEGER := 10;  
    num2 INTEGER := 10;
    result VARCHAR2(10);
BEGIN
    
    result := CASE
                WHEN num1 = num2 THEN 'Equal'
                ELSE 'Not Equal'
              END;

   
    DBMS_OUTPUT.PUT_LINE('Result: ' || result);
END;











 if two numbers are not equal 
DECLARE
    num1 INTEGER := 10;  
    num2 INTEGER := 20;
    result VARCHAR2(10);
BEGIN
    
    result := CASE
                WHEN num1 = num2 THEN 'Equal'
                ELSE 'Not Equal'
              END;

   
    DBMS_OUTPUT.PUT_LINE('Result: ' || result);
END;








Part 02:
To solve the following use the scott schema
6.Write a query that can display the salary of employee ALLEN. If ALLEN’s salary is greater than 2000 display ‘SALARY GREATER THAN 2000’ and If not then display ‘SALARY LESS THAN 2000’.

SELECT ENAME,
       SAL,
       CASE
           WHEN SAL > 2000 THEN 'SALARY GREATER THAN 2000'
           ELSE 'SALARY LESS THAN 2000'
       END AS SALARY_STATUS
FROM EMP
WHERE ENAME = 'ALLEN';





7.Write a query that can ask user to input the EMPNO of employee WARD and display his salary.
SELECT ENAME, SAL
FROM EMP
WHERE EMPNO = 7521
AND ENAME = 'WARD';






8.Write a query that can ask user to input the EMPNO of employee BLAKE,CLARK and TURNER and display their respective salary.
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE EMPNO IN (
    (SELECT EMPNO FROM EMP WHERE ENAME = 'BLAKE'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'CLARK'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'TURNER')
);

















9.Write a query that can ask user to input the EMPNO of employee BLAKE,CLARK and TURNER and display their respective salary, add the salaries and display the total.
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE EMPNO IN (
    (SELECT EMPNO FROM EMP WHERE ENAME = 'BLAKE'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'CLARK'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'TURNER')
)
UNION ALL
SELECT NULL, 'TOTAL', SUM(SAL)
FROM EMP
WHERE EMPNO IN (
    (SELECT EMPNO FROM EMP WHERE ENAME = 'BLAKE'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'CLARK'),
    (SELECT EMPNO FROM EMP WHERE ENAME = 'TURNER')
);








10.Write a query that displays the commission of employee SMITH. If SMITH’s commission is NULL. Display ‘NOT APPLICABLE FOR COMMISSION’


SELECT 
    ENAME,
    CASE 
        WHEN COMM IS NULL THEN 'NOT APPLICABLE FOR COMMISSION'
        ELSE TO_CHAR(COMM, '9999990.00')
    END AS COMMISSION
FROM EMP
WHERE ENAME = 'SMITH';







Part 03:
To solve the following use the scott schema
11.Write a query that can display the salary of employee JONES three times using basic loop.
DECLARE
    v_salary EMP.SAL%TYPE;
BEGIN
    
    SELECT SAL INTO v_salary
    FROM EMP
    WHERE ENAME = 'JONES';
    
    
    FOR i IN 1..3 LOOP
        DBMS_OUTPUT.PUT_LINE('Salary of JONES: ' || v_salary);
    END LOOP;
END;









12.Write a query that can display the salary of employee JONES three times using while loop.
DECLARE
    v_salary EMP.SAL%TYPE;
    v_counter INTEGER := 1;
BEGIN
    
    SELECT SAL INTO v_salary
    FROM EMP
    WHERE ENAME = 'JONES';
    
   
    WHILE v_counter <= 3 LOOP
        DBMS_OUTPUT.PUT_LINE('Salary of JONES: ' || v_salary);
        v_counter := v_counter + 1;
    END LOOP;
END;








13.Write a query that can display the salary of employee JONES three times using for loop.
DECLARE
    v_salary EMP.SAL%TYPE;
BEGIN
    
    SELECT SAL INTO v_salary
    FROM EMP
    WHERE ENAME = 'JONES';
    
    
    FOR i IN 1..3 LOOP
        DBMS_OUTPUT.PUT_LINE('Salary of JONES: ' || v_salary);
    END LOOP;
END;









14.Create a function that returns the total number of departments.
CREATE OR REPLACE FUNCTION get_total_departments
RETURN NUMBER
IS
    v_total_depts NUMBER;
BEGIN
    
    SELECT COUNT(*) INTO v_total_depts
    FROM DEPT;
    
    
    RETURN v_total_depts;
END;






DECLARE
    total_depts NUMBER;
BEGIN
    
    total_depts := get_total_departments;
    
    
    DBMS_OUTPUT.PUT_LINE('Total number of departments: ' || total_depts);
END;









15.Create a procedure to update the salary of employee Allen to 100.
CREATE OR REPLACE PROCEDURE update_salary_allen
IS
BEGIN
    
    UPDATE EMP
    SET SAL = 100
    WHERE ENAME = 'ALLEN';
    
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Salary of employee ALLEN has been updated to 100.');
END;










BEGIN
    update_salary_allen;
END;




